Racíocinio estruturado da solução da atividade 1

Primeiramente, a tarefa pede para detectar a frequência das bases C, A, G, T na sequência de DNA. Fiz isso utilizando um loop de contagem básico.
Fiz da seguinte forma: estabeleci o conteúdo do documento DNA.txt como valor para a varíavel "stringdna". Segue código: 

stringdna = 
"TTTATAGTAGAAGAGGTCCAAGCGGGAACAGAACTGCTAACCCAGCCCCATCCTGTCCTTACACAAAGATGCTGCGGTCTTGATCCACCTCGCTCGGCCACTCGTTCACCCCGTCTAAGTTTGCGCGGAACTAACCAAAAGATGACAACAAGGCGGGACGAACCCTTTACGCTGTCACTCCATAAAACATAGTTTTAATACCGGGTCTCTCAAAAAAGTATGCTGGGTGCATCGTTCCTTGGTTTAGTAGCTCCTCCGTTTCGGGCTCGGATGAGCCTCGGAATCCTAAGGGTAAATGCGAAAGATCCCACGGATAAGGTCACTTTAACCTGTTACCCAACCAAGCCGGGCACGCGCGGTCTCCCGGATGACATCTCGGGAGCCTCACGAATCAAGGCCGCAATGCAAGAGAGGCTTTACGCCACGGTAGAGGTTACACGTTTCCCGGGGCAGGATCCCGTCAGAGGTTTCCTTAACGAACTCACTCCAGGATACAGTTCCATGCACTAGGGGTCTCGGAGTCAGGCGCAACCGGCGCAAAGTAAACGAGTGGTCGAAAGCGGCGATTGTTGTCGATGGAGGGTTCTTTAACATACTTACGGCCTTAGCAGTTCATACACCCTCTACTCAAGAGGTTGCAGCGAACTTAGTTCCCAGTAATGCACACTAGTTGACCTCATCCCTAGAGTGACAACTCACTATAGAAGTCGTCGTTTTGCTAATCGATCCCGTCGATCCGATGCAAACTTACCCATTCACGCTCGCACATCGGTTTCACAACGGATCGTCATACTCCAGTGAGACGCGGATGGGCGTCAAGTGGTT"

Depois disso, criei um dicionário para armazenar a contagem de cada uma das bases. Segue código: 

 contagem = {'A': 0, 'C': 0, 'G': 0, 'T': 0}

Finalmente, utilizei um loop que definia que, passando por cada uma das letras, cada vez que uma das letras que designei no dicionário "contagem" seria adicionado o valor um - para que o programa fizesse por mim o trabalho de passar por cada letra e contar cada vez que A, C, G ou T aparecessem. Ou, em outras palavras, iterar pela sequência.
Segue código: 

for base in stringdna:
     if base in contagem:
         contagem[base] += 1

O resultado, após inserir o comando de print, foi o seguinte: 

 print(contagem)
{'A': 209, 'C': 227, 'G': 200, 'T': 189}
                                                              #Eu omiti a descrição da contagem enquanto estava sendo feita pelo programa pois era muito extensa, mas posso enviar. 


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
A segunda parte da tarefa pede para que eu transforme o conteúdo do arquivo DNA.txt em uma sequência de RNA. Para resolver essa questão, é necessário realizar a transcrição do DNA para RNA, substituindo cada nucleotídeo pela sua base complementar, conforme as regras de pareamento. A base timina (T) do DNA deve ser substituída pela adenina (A) no RNA, a citosina (C) do DNA por guanina (G) no RNA, a adenina (A) do DNA por uracila (U) no RNA, e a guanina (G) do DNA por citosina (C) no RNA. Esse processo de transcrição resulta na formação de uma sequência de RNA mensageiro (mRNA) que corresponde à informação genética do DNA. Usei os seguintes códigos: 

A principio, usei um código básico de substituição para realizar a transcrição: 

transcricao = {'T': 'A', 'A': 'U', 'C': 'G', 'G': 'C'}

Em seguida inseri: 
rna_sequence = ''.join([transcricao[base] for base in stringdna])
 #obs: stringdna já estava com valor (DNA.txt) no meu shell.

Após inserir o comando print, o resultado obtido está contido no arquivo RNA.txt                                                 

Em seguida, o ideal seria em seguida fazer o mesmo processo de contagem que foi feito na primeira parte da tarefa, para conferir se os números estão compatíveis. 

contagem_rna = {'A': 0, 'U': 0, 'C': 0, 'G': 0}

for base in RNA_txt:
    if base in contagem_rna:
        contagem_rna[base] += 1

Depois, inserir o comando print.

print(contagem_rna)
{'A': 189, 'U': 209, 'C': 200, 'G': 227}                  #resultado compatível

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Na terceira tarefa, é pedido para fazer a tradução do mRNA em seus aminoácidos correspondentes. Para isso, primeiramente 
Primeiramente, busquei a informação de uma tabela que indicasse o aminoácido traduzido por cada códon. Ela consta no arquivo codigogenetico.txt, e a sequência transformada em formato de dicionário consta aqui: 
tabela_codons = {
    'UUU': 'Fenilalanina (F)', 'UUC': 'Fenilalanina (F)', 
    'UUA': 'Leucina (L)', 'UUG': 'Leucina (L)', 
    'CUU': 'Leucina (L)', 'CUC': 'Leucina (L)', 'CUA': 'Leucina (L)', 'CUG': 'Leucina (L)', 
    'AUU': 'Isoleucina (I)', 'AUC': 'Isoleucina (I)', 'AUA': 'Isoleucina (I)', 
    'AUG': 'Metionina (M) – Códon de início', 
    'GUU': 'Valina (V)', 'GUC': 'Valina (V)', 'GUA': 'Valina (V)', 'GUG': 'Valina (V)', 
    'UCU': 'Serina (S)', 'UCC': 'Serina (S)', 'UCA': 'Serina (S)', 'UCG': 'Serina (S)', 
    'CCU': 'Prolina (P)', 'CCC': 'Prolina (P)', 'CCA': 'Prolina (P)', 'CCG': 'Prolina (P)', 
    'ACU': 'Treonina (T)', 'ACC': 'Treonina (T)', 'ACA': 'Treonina (T)', 'ACG': 'Treonina (T)', 
    'GCU': 'Alanina (A)', 'GCC': 'Alanina (A)', 'GCA': 'Alanina (A)', 'GCG': 'Alanina (A)', 
    'UAU': 'Tirosina (Y)', 'UAC': 'Tirosina (Y)', 
    'UAA': 'Códon de parada', 'UAG': 'Códon de parada', 'UGA': 'Códon de parada', 
    'CAU': 'Histidina (H)', 'CAC': 'Histidina (H)', 
    'CAA': 'Glutamina (Q)', 'CAG': 'Glutamina (Q)', 
    'AAU': 'Asparagina (N)', 'AAC': 'Asparagina (N)', 
    'AAA': 'Lisina (K)', 'AAG': 'Lisina (K)', 
    'GAU': 'Ácido aspártico (D)', 'GAC': 'Ácido aspártico (D)', 
    'GAA': 'Ácido glutâmico (E)', 'GAG': 'Ácido glutâmico (E)', 
    'UGU': 'Cisteína (C)', 'UGC': 'Cisteína (C)', 
    'GGU': 'Glicina (G)', 'GGC': 'Glicina (G)', 'GGA': 'Glicina (G)', 'GGG': 'Glicina (G)'}

Para fazer a tradução, minha ideia inicial foi realizar uma análise de uma sequência de RNA, identificando trigramas específicos e comparando-os com os códons de RNA que codificam aminoácidos. Durante a análise, é necessário identificar e tratar adequadamente os códons de início (geralmente AUG - metionina) e os códons de parada (UAA, UAG e UGA), que sinalizam o início e o fim da tradução de uma proteína. Além disso, eu precisava de uma maneira de não só identificar os triagramas mas mantê-los organizados na sequência original para que não houvesse um erro na sequência de aminoácidos resultante. 
Para resolver isso, decidi extrair os trigramas de três nucleotídeos consecutivos e os armazenar em uma lista, respeitando a ordem original. 

Resumo de abreviações de AA
A	Ala		G	Gly		M	Met		S	Ser
C	Cys	H	His	N	Asn	T	Thr
D	Asp	I	Ile	P	Pro	V	Val
E	Glu	K	Lys	Q	Gln	W	Trp
F	Phe	L	Leu	R	Arg	Y	Tyr

códon de parada consta como "."
